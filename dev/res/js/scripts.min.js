(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable compat/compat */
var url = 'https://private-9d5e37a-testassignment.apiary-mock.com/get-bears';
var list = document.querySelector('.item-wrapper');
var checkbox = document.querySelector('.checkbox');

function showReserveItem(listItem, className) {
  for (var i = 0; i < list.children.length; i += 1) {
    if (!listItem.children[i].className.includes(className)) {
      listItem.children[i].style.display = 'none';
    }
  }
}

function changeFilterValue(item, value) {
  item.dataset.filter = value;
}

function hideItem(item) {
  item.style.display = 'none';
}

function hideChildrenItem(items) {
  for (var i = 0; i < items.children.length; i += 1) {
    hideItem(items.children[i]);
  }
}

function showItem(item, styleValue) {
  item.style.display = styleValue;
}

function showFilterItem(items, filterStatus) {
  for (var i = 0; i < items.children.length; i += 1) {
    if (items.children[i].getAttribute('data-filter') === filterStatus) {
      showItem(items.children[i], 'flex');
    }
  }
}

function showAllItem(listItem) {
  for (var i = 0; i < listItem.children.length; i += 1) {
    listItem.children[i].style.display = 'flex';
  }
}

function postData(item, button, link, filterValue) {
  fetch(link, {
    method: 'POST'
  }).then(function (res) {
    if (res.status === 200) {
      hideItem(item);
      hideItem(button.parentNode);
      changeFilterValue(item, filterValue);
    }
  });
}

function getData(urlLink) {
  return fetch(urlLink).then(function (response) {
    return response.json();
  });
}

function createItem(item) {
  list.innerHTML += "\n        <div data-filter=\"all\" id=\"".concat(item.id, "\" class=\"item ").concat(item.in_reserve ? 'item--reserve' : '', "\">\n        <div class=\"item__img\"><img src=\"").concat(item.image_url, "\" alt=\"\"></div>\n        <div class=\"item__info\">\n            <div class=\"item__title\">").concat(item.name, "</div>\n            <div class=\"item__type\">").concat(item.type, "</div>\n            <div class=\"item__gender\">").concat(item.gender, "</div>\n        </div>\n        <button id=\"accept\" class=\"btn btn-accept\">\u041F\u0440\u0438\u043D\u044F\u0442\u044C</button>\n        <button id=\"reject\" class=\"btn btn-reject\">\u041E\u0442\u043A\u043B\u043E\u043D\u0438\u0442\u044C</button>\n</div>");
}

function createData(data) {
  for (var i = 0; i < data.length; i += 1) {
    var item = data[i];
    createItem(item);
  }
}

checkbox.addEventListener('change', function () {
  if (checkbox.checked) {
    showReserveItem(list, 'reserve');
  } else {
    showAllItem(list);
  }
});

var selectbox = _toConsumableArray(document.querySelectorAll('.select-box__input'));

selectbox.forEach(function (element) {
  return element.addEventListener('change', function () {
    var status = element.value;

    if (status === 'accept') {
      hideChildrenItem(list);
      showFilterItem(list, 'accept');
    } else if (status === 'reject') {
      hideChildrenItem(list);
      showFilterItem(list, 'reject');
    } else if (status === 'all') {
      hideChildrenItem(list);
      showFilterItem(list, 'all');
    }
  });
});
document.addEventListener('click', function (event) {
  if (event.target.matches('button')) {
    var button = event.target;
    var itemId = button.parentNode.id;
    var item = button.parentNode;
    var acceptLink = "https://private-9d5e37a-testassignment.apiary-mock.com/resolve-bear?id=".concat(itemId);
    var rejectLink = "https://private-9d5e37a-testassignment.apiary-mock.com/reject-bear?id=".concat(itemId);

    if (button.id === 'accept') {
      postData(item, button, acceptLink, 'accept');
    } else if (button.id === 'reject') {
      postData(item, button, rejectLink, 'reject');
    }
  }
});
getData(url).then(function (data) {
  return createData(data.results.data);
}).catch(function (err) {
  throw err;
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
